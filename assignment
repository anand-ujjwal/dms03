#include <stdio.h>
#include <stdlib.h>
int SIZE;

int reflexive(int [10][10],int []);
int symmetric(int [10][10], int []);
int transitive(int [10][10], int []);
int anti_symmetric(int [10][10], int []);

main()
{
    int i,j,A[10],R[10][10];

    printf("Enter the size of set A: ");
    scanf("%d",&SIZE);
    printf("Enter %d elements of set A: ",SIZE);
    for(i=1;i<=SIZE;i++)
    scanf("%d",&A[i]);

    printf("Enter the relations:\n");
    for(i=1;i<=SIZE;i++)
    {
        for(j=1;j<=SIZE;j++)
        {
            printf("%d,%d:",A[i],A[j]);
            scanf("%d",&R[A[i]][A[j]]);
        }
    }

    int w,x,y,z;

    w=reflexive(R,A);
    x=symmetric(R,A);
    y=anti_symmetric(R,A);
    z=transitive(R,A);

    if(w==1)
        printf("Reflexive.\n");
    if(x==1)
        printf("Symmetric.\n");
    if(y==1)
        printf("Anti-Symmetric.\n");
    if(z==1)
        printf("Transitive.\n");

    if(w && x && z)
        printf("The relation is equivalence relation.\n");
    else if(w && y && z)
        printf("The relation is a partial fraction.\n");
    else
        printf("The relation is neither an equivalence relation nor a partial fraction.\n");
}

int reflexive(int R[10][10],int A[SIZE])
{
    int i,count=0;
    for(i=1;i<=SIZE;i++)
    {
            if(R[A[i]][A[i]]==1)
                count++;
    }
    if(count==SIZE)
        return 1;
    else
        return 0;
}

int symmetric(int R[10][10], int A[SIZE])
{
    int i,j;

    for(i=1;i<=SIZE;i++)
    {
        for(j=1;j<=SIZE;j++)
        {
            if(R[A[i]][A[j]]==1 && R[A[j]][A[i]]==1)
                return 0;
        }
    }
    return 1;
}

int anti_symmetric(int R[10][10], int A[SIZE])
{
    int i,j;

    for(i=1;i<=SIZE;i++)
    {
        for(j=1;j<=SIZE;j++)
        {
            if(i!=j)
            {
                if(R[A[i]][A[j]]==R[A[j]][A[i]])
                    return 0;
            }
        }
    }
    return 1;
}

int transitive(int R[10][10], int A[SIZE])
{
    int i,j,k;

    for(i=1;i<=SIZE;i++)
    {
        for(j=1;j<=SIZE;j++)
        {
            if(R[A[i]][A[j]]==1)
            {
                for(k=1;k<=SIZE;k++)
                {
                    if(R[A[j]][A[k]]==1)
                    {
                        if(R[A[i]][A[k]]!=1)
                            return 0;
                    }
                }
            }
        }
    }
    return 1;
}
